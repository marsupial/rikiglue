/*
	lut.cpp
*/

#include "common/application.h"
#include "frame/operations.h"
#include <assert.h>

namespace rikiGlue
{

#define RELEASE_PRIVATE_KEY 1

// cat data/elut.dat | build/ssl data/gugger.public.key | ./build/printStruct
// cat data/dlut.dat | build/ssl data/gugger.public.key | ./build/printStruct

// cat data/elut.dat | build/ssl data/public.key | ./build/printStruct
// cat data/dlut.dat | build/ssl data/public.key | ./build/printStruct

#if !defined(RIKI_AUTHOR)

#if defined(RELEASE_PRIVATE_KEY)

const static uint8_t kEncrEncryptLut[896] =
{
	 0x01, 0x4D, 0x42, 0x50, 0x8E, 0x02, 0x67, 0xD3, 0xED, 0x62,
	 0x85, 0x96, 0x2F, 0xE4, 0x24, 0x18, 0x99, 0x9D, 0x47, 0x8A,
	 0xC5, 0x58, 0x86, 0x2D, 0x91, 0xD3, 0x69, 0x97, 0xA8, 0x51,
	 0x8F, 0xB7, 0xB4, 0x26, 0xEE, 0x13, 0xD7, 0x44, 0xDD, 0x47,
	 0x0B, 0x16, 0xA0, 0x47, 0x53, 0x45, 0xCC, 0xFF, 0xB2, 0xD2,
	 0x96, 0xCF, 0x42, 0xCC, 0x98, 0xB0, 0xD5, 0x65, 0x40, 0x3E,
	 0x3C, 0xE6, 0x57, 0xAE, 0x44, 0xC0, 0x6D, 0xA4, 0xB7, 0xB8,
	 0x1F, 0xEF, 0xC8, 0x7F, 0x3D, 0x80, 0x35, 0xF0, 0x26, 0xC3,
	 0xCD, 0xB4, 0xC1, 0xFE, 0x80, 0xF2, 0x79, 0x1E, 0xBE, 0xA0,
	 0x1B, 0x26, 0x0B, 0x71, 0x52, 0x34, 0xF4, 0xDB, 0x6B, 0x8D,
	 0x94, 0xE3, 0x5B, 0x17, 0x22, 0x05, 0x14, 0xAD, 0x94, 0xCF,
	 0xDB, 0x6D, 0x02, 0x08, 0x15, 0xBC, 0xE4, 0x4B, 0x2E, 0x32,
	 0x68, 0x7B, 0xDC, 0x71, 0xB3, 0x36, 0x52, 0x6F, 0x23, 0x73,
	 0x5F, 0x53, 0x55, 0x34, 0x8E, 0xD9, 0x9C, 0xD4, 0xBD, 0xC1,
	 0x84, 0x80, 0x25, 0x9D, 0x5F, 0x6F, 0x45, 0xED, 0xAE, 0x44,
	 0xD5, 0x8A, 0xE6, 0xC5, 0x85, 0x46, 0x38, 0x8B, 0x2C, 0x97,
	 0x04, 0x27, 0xF1, 0xDD, 0xB4, 0x66, 0xDE, 0x1E, 0x00, 0xE8,
	 0xBC, 0xF7, 0xEE, 0x4B, 0xF3, 0x62, 0x7A, 0xF4, 0xBF, 0xA8,
	 0xF5, 0xA0, 0x51, 0xD6, 0x90, 0x2E, 0x5E, 0xF8, 0x45, 0x83,
	 0xA9, 0xEC, 0x86, 0x17, 0xFA, 0xF1, 0xCD, 0xCD, 0x68, 0xDB,
	 0x72, 0x8A, 0x9F, 0x33, 0x18, 0xE7, 0x87, 0x13, 0xFF, 0x06,
	 0x93, 0xC2, 0xA1, 0x97, 0xDD, 0x6C, 0x8A, 0x52, 0x59, 0xDA,
	 0x6C, 0x74, 0x0D, 0xD9, 0x46, 0x12, 0xBA, 0xCE, 0xB6, 0x09,
	 0x19, 0x24, 0xC3, 0xEA, 0x35, 0x7E, 0xB9, 0xF5, 0xDA, 0x77,
	 0x6F, 0x00, 0xF8, 0xC7, 0x2D, 0x3A, 0x69, 0xDE, 0x44, 0xE6,
	 0x06, 0x00, 0xB5, 0x8C, 0xD2, 0x7D, 0x21, 0xD5, 0xAF, 0x1B,
	 0xBB, 0x40, 0xD1, 0x9D, 0x88, 0x9A, 0x00, 0x4D, 0x83, 0xFB,
	 0xE2, 0x0E, 0x2A, 0x67, 0xC2, 0x1C, 0x47, 0x03, 0x7E, 0x23,
	 0x66, 0x73, 0xB7, 0xE5, 0x57, 0x92, 0xA8, 0x85, 0xBF, 0x3F,
	 0x00, 0x1A, 0xB8, 0xBF, 0x48, 0x82, 0xE2, 0x62, 0xA9, 0x11,
	 0xA6, 0x01, 0x5F, 0x81, 0x9C, 0x36, 0x98, 0x1A, 0xB0, 0x5D,
	 0xB0, 0xD7, 0xE8, 0xB4, 0xAC, 0x9D, 0xDE, 0xDE, 0x29, 0x12,
	 0x11, 0xCA, 0xAF, 0x6E, 0xC3, 0xFC, 0x11, 0x23, 0x9B, 0x5C,
	 0xE8, 0x7A, 0xB1, 0x10, 0x47, 0x30, 0x6B, 0x24, 0x75, 0x59,
	 0x63, 0x10, 0x1F, 0x61, 0x82, 0x58, 0x51, 0x55, 0x71, 0xCE,
	 0x27, 0x64, 0x5C, 0x70, 0xA4, 0x1E, 0x5E, 0x80, 0x57, 0xC4,
	 0x50, 0x4B, 0x2D, 0x45, 0x76, 0x02, 0xC1, 0x5C, 0xA5, 0x7D,
	 0x02, 0xEA, 0x0E, 0x04, 0xA9, 0xB5, 0x2A, 0x2D, 0xA5, 0x5B,
	 0x0D, 0xCF, 0xC9, 0x7B, 0x2B, 0x10, 0xF2, 0x27, 0x5F, 0x81,
	 0x19, 0xD6, 0xEB, 0x55, 0x98, 0x8D, 0x20, 0xBC, 0xEB, 0xCB,
	 0xA0, 0x75, 0x48, 0xF5, 0x6B, 0x22, 0xDB, 0x50, 0xEC, 0x4C,
	 0x14, 0x07, 0x27, 0x1E, 0x18, 0x87, 0x6E, 0x72, 0x88, 0x0A,
	 0xCE, 0xD9, 0xFC, 0xAF, 0x35, 0x5E, 0x23, 0x6A, 0xBD, 0x45,
	 0x95, 0x56, 0xF7, 0x57, 0xF0, 0x38, 0x16, 0xAE, 0x3C, 0x0A,
	 0x66, 0xFE, 0x39, 0xB3, 0x3B, 0xFF, 0x57, 0xF6, 0x8F, 0x89,
	 0x45, 0xCE, 0x66, 0x21, 0xCF, 0xAD, 0x14, 0x4C, 0xDA, 0xE2,
	 0x80, 0x76, 0xAA, 0x3B, 0x66, 0x52, 0xCA, 0xA5, 0xD9, 0xCF,
	 0x20, 0x53, 0x42, 0x62, 0x76, 0x76, 0xE1, 0xE3, 0xE5, 0x00,
	 0x18, 0x97, 0x9B, 0xBF, 0xE5, 0xB9, 0x25, 0x9F, 0x8B, 0x13,
	 0xF4, 0xD4, 0x2B, 0x2A, 0x06, 0x34, 0xD9, 0x9A, 0x05, 0xA2,
	 0xDB, 0x7F, 0x65, 0x36, 0x63, 0x89, 0xCE, 0x7B, 0x5C, 0xBD,
	 0xF5, 0xA7, 0x48, 0xD0, 0xBB, 0x5F, 0xA3, 0xE8, 0x3B, 0xDF,
	 0x36, 0x95, 0xA2, 0xB1, 0x07, 0x12, 0x9B, 0xBC, 0xA7, 0xBA,
	 0x62, 0x3F, 0x65, 0x73, 0x13, 0x15, 0x0C, 0x15, 0x79, 0x75,
	 0x27, 0xC5, 0x2E, 0x13, 0xD0, 0x03, 0xFA, 0x3D, 0x2F, 0xC0,
	 0x2B, 0xC3, 0x15, 0x1B, 0x63, 0x3E, 0x0B, 0x09, 0x27, 0xB9,
	 0xE3, 0x95, 0xCD, 0x55, 0xD9, 0x86, 0x70, 0x0C, 0x13, 0x42,
	 0xD2, 0x18, 0x9F, 0x8E, 0x09, 0x5F, 0x26, 0x5C, 0x2B, 0x7B,
	 0x60, 0x04, 0x96, 0xBF, 0xAD, 0x34, 0x5D, 0xF6, 0x30, 0x77,
	 0x5E, 0x85, 0xFF, 0xCA, 0x39, 0xE4, 0x8E, 0x18, 0xC5, 0x7D,
	 0xDB, 0xB4, 0x49, 0x78, 0xE8, 0x73, 0x45, 0xB6, 0xD6, 0x7A,
	 0xBF, 0x0A, 0x6B, 0xBA, 0x18, 0xE5, 0xED, 0x34, 0x13, 0x55,
	 0x36, 0xF0, 0x5B, 0x13, 0x73, 0xA6, 0x0A, 0x91, 0x2B, 0x1B,
	 0x6C, 0xE5, 0xBB, 0xE7, 0x05, 0x6B, 0x2C, 0x92, 0x1F, 0x5B,
	 0x88, 0x28, 0x94, 0xAA, 0xE5, 0x9C, 0xE4, 0xE8, 0x72, 0x0F,
	 0x9C, 0x0C, 0xB0, 0xE9, 0xF6, 0xC4, 0x55, 0xC4, 0x31, 0x57,
	 0x27, 0xF6, 0x0B, 0xE8, 0x28, 0x84, 0xB6, 0xA8, 0xD7, 0xDA,
	 0xE9, 0xDB, 0xB2, 0x2E, 0xBD, 0x0C, 0xFA, 0x5D, 0x66, 0xEF,
	 0xB8, 0x8C, 0xAD, 0x5F, 0xEB, 0xEE, 0x8A, 0x84, 0xC6, 0x10,
	 0xC4, 0x5C, 0x40, 0x17, 0x6B, 0xE3, 0x67, 0x2F, 0x54, 0x4A,
	 0xD5, 0xF8, 0x8E, 0xC6, 0x3B, 0xCE, 0xC8, 0xB9, 0x6F, 0x3B,
	 0xCC, 0xA8, 0x73, 0x10, 0x96, 0x42, 0x74, 0x2D, 0xB2, 0xDE,
	 0xAA, 0x2B, 0x88, 0xA0, 0x05, 0xEC, 0x3D, 0xCB, 0x37, 0xF5,
	 0x6E, 0xE3, 0xF6, 0x2D, 0x13, 0x27, 0x22, 0xF0, 0x6D, 0x33,
	 0xF5, 0x7F, 0x03, 0xFA, 0x6F, 0x6F, 0xCA, 0x8E, 0xE9, 0x58,
	 0x4D, 0x82, 0x44, 0x2D, 0x76, 0x5F, 0xED, 0x3D, 0x1D, 0x29,
	 0x55, 0xD0, 0x39, 0x3A, 0xD6, 0xA9, 0xEF, 0x4F, 0x8E, 0x50,
	 0x75, 0x19, 0xD1, 0xCD, 0xDC, 0xB4, 0x0D, 0x46, 0x53, 0x48,
	 0x3E, 0xE8, 0x76, 0xCD, 0xF9, 0x83, 0x28, 0xE3, 0xFC, 0xDB,
	 0x73, 0x87, 0x32, 0x38, 0x28, 0xA8, 0x56, 0xF5, 0xB0, 0xB5,
	 0x35, 0x97, 0x40, 0xCE, 0x42, 0x65, 0x9B, 0x10, 0x4E, 0x65,
	 0xED, 0x5C, 0xFE, 0xA0, 0x94, 0x8B, 0xFF, 0xB5, 0x2B, 0x66,
	 0x7E, 0x4E, 0x8C, 0x99, 0x71, 0x6D, 0x19, 0xA2, 0x71, 0xE4,
	 0x3C, 0x0F, 0xF0, 0xCA, 0x32, 0x48, 0x9E, 0x4B, 0xAF, 0x65,
	 0x84, 0x59, 0x6F, 0xDA, 0xE5, 0x95, 0x77, 0x2A, 0x0C, 0xBD,
	 0x17, 0xA5, 0xC5, 0xA0, 0x32, 0x2D, 0x46, 0x4E, 0xD5, 0xAE,
	 0x9F, 0xA1, 0x38, 0x26, 0xED, 0xAD, 0x9D, 0x57, 0x87, 0x52,
	 0xCD, 0x8B, 0xB3, 0xB5, 0xC1, 0xF5, 0x0D, 0xA8, 0x7C, 0xE6,
	 0x14, 0x03, 0xF1, 0x8B, 0xFB, 0xA7, 0xD6, 0xF4, 0xB1, 0x18,
	 0x90, 0x95, 0xAF, 0xC1, 0x21, 0x54
};

const static uint8_t kEncrDecryptLut[896] =
{
	 0x01, 0x13, 0x13, 0xC0, 0xBD, 0xBC, 0xB1, 0xCD, 0x9F, 0x2B,
	 0xBC, 0xBB, 0x6E, 0x56, 0x5A, 0x2E, 0xB8, 0x97, 0x4E, 0x11,
	 0xBB, 0xE0, 0xF4, 0xE1, 0xE1, 0xBF, 0x52, 0x4D, 0xB9, 0xE7,
	 0xE6, 0x4C, 0xCE, 0xC1, 0xA1, 0xC6, 0x23, 0x78, 0xDC, 0x9F,
	 0x32, 0x6A, 0x15, 0xDF, 0x1E, 0x14, 0x94, 0x56, 0xDD, 0x50,
	 0xD4, 0xC0, 0xF8, 0x33, 0xB9, 0x0B, 0x5A, 0x6B, 0x5A, 0x04,
	 0x30, 0x40, 0x19, 0xAE, 0xA8, 0xD1, 0x1E, 0xB6, 0x58, 0x4E,
	 0xE1, 0x2D, 0x94, 0x23, 0xED, 0x5F, 0x60, 0x80, 0x82, 0x77,
	 0xB8, 0xD6, 0x9C, 0x9F, 0x0F, 0xAC, 0x57, 0xCB, 0x67, 0x68,
	 0x27, 0x9D, 0x6D, 0xD9, 0xB6, 0x5C, 0x43, 0xA4, 0x93, 0x47,
	 0xF9, 0xE6, 0x04, 0xEB, 0x09, 0x58, 0xF5, 0x05, 0xF4, 0xA7,
	 0xAF, 0x0C, 0xC5, 0xF0, 0xC8, 0x00, 0x05, 0x7A, 0xFD, 0xEC,
	 0x88, 0xEB, 0xAE, 0x52, 0x2D, 0x5C, 0x16, 0x34, 0x11, 0xFD,
	 0x63, 0x08, 0x5B, 0x56, 0xE0, 0xE9, 0x78, 0xEE, 0x4D, 0xF9,
	 0xBC, 0x31, 0x11, 0x5F, 0x0E, 0xCC, 0xB3, 0xD3, 0x3D, 0xA1,
	 0xCA, 0x2D, 0xC7, 0x62, 0xF1, 0x84, 0x3A, 0xA3, 0x64, 0xEA,
	 0xD3, 0x47, 0xEC, 0xA2, 0x36, 0x96, 0xBD, 0x24, 0xEF, 0x36,
	 0xF3, 0xDF, 0x03, 0xDA, 0x66, 0x63, 0xD3, 0xF1, 0x41, 0xF9,
	 0xE6, 0xBB, 0xD7, 0x14, 0xBA, 0xC9, 0x60, 0xDB, 0x11, 0x07,
	 0x06, 0x2D, 0x46, 0x5B, 0x33, 0x11, 0x15, 0xB2, 0x2F, 0x14,
	 0x92, 0x9C, 0xDE, 0xD0, 0x2B, 0x0D, 0xF6, 0x3F, 0x97, 0xB4,
	 0x27, 0xDE, 0xF0, 0x33, 0x7D, 0x18, 0xD1, 0xD5, 0x83, 0x0A,
	 0x4B, 0xC4, 0xD9, 0x8D, 0x3A, 0xEA, 0x1A, 0x2E, 0xC3, 0x5E,
	 0x93, 0x4F, 0x84, 0xDC, 0xF6, 0x66, 0xD3, 0x99, 0xCC, 0x36,
	 0xC7, 0x43, 0x2B, 0x1E, 0x89, 0x8D, 0xB2, 0xB7, 0x52, 0x12,
	 0x0F, 0xEE, 0x00, 0xDF, 0x42, 0x53, 0x7E, 0x2F, 0xFD, 0x1D,
	 0xF1, 0xC8, 0xD9, 0xCE, 0xF2, 0x37, 0xE7, 0xC5, 0xEE, 0x14,
	 0x11, 0xB1, 0x89, 0xA0, 0xBA, 0xEC, 0xC3, 0xBC, 0x37, 0xC7,
	 0xF9, 0x95, 0x93, 0xA2, 0x60, 0x22, 0x54, 0x18, 0xB3, 0x8F,
	 0xF0, 0x55, 0x92, 0xD6, 0x93, 0x0D, 0x6C, 0xA8, 0xC4, 0xDD,
	 0x73, 0x28, 0xFA, 0x8D, 0x44, 0x39, 0x1A, 0x1A, 0x29, 0xFD,
	 0xFC, 0x28, 0x30, 0xF3, 0xBE, 0xB2, 0x1B, 0x66, 0x60, 0x2F,
	 0xCB, 0xCF, 0x9A, 0xA5, 0xAA, 0xA0, 0xF5, 0x43, 0x0E, 0xB4,
	 0x7F, 0xB5, 0x73, 0x68, 0xE2, 0x73, 0x00, 0xD3, 0x49, 0xDD,
	 0xAB, 0x27, 0x9E, 0x54, 0x33, 0xD2, 0x81, 0xA0, 0x18, 0x70,
	 0x3E, 0x5D, 0xFD, 0xDC, 0xB7, 0xE0, 0xEA, 0x1B, 0xA4, 0x28,
	 0x28, 0x65, 0x9C, 0xFC, 0x00, 0xB7, 0xA8, 0xA0, 0x2E, 0xE8,
	 0xB9, 0xF0, 0xD9, 0xC6, 0xFE, 0x8D, 0xC5, 0x16, 0x96, 0x33,
	 0xA5, 0xF6, 0x60, 0xEE, 0x22, 0xFC, 0x81, 0xFE, 0x62, 0x52,
	 0x13, 0xCA, 0x68, 0xA6, 0x56, 0xB6, 0xB9, 0x2A, 0xBE, 0xEF,
	 0x0B, 0x94, 0xC7, 0x76, 0xD7, 0x5A, 0xD3, 0x0F, 0x71, 0xF0,
	 0xC8, 0x25, 0x25, 0x44, 0xD0, 0x69, 0xDE, 0x43, 0xE8, 0x9D,
	 0xA3, 0x68, 0xF6, 0x36, 0xBB, 0x9C, 0xE5, 0x86, 0x06, 0xF6,
	 0x6E, 0xCD, 0xAD, 0x86, 0xFD, 0x67, 0x96, 0xA7, 0x2E, 0xF0,
	 0xD3, 0x49, 0x19, 0x9C, 0x65, 0x53, 0xB8, 0xDF, 0xC8, 0xF4,
	 0x72, 0xD1, 0xDC, 0x63, 0x4E, 0xDD, 0x22, 0x18, 0xA5, 0xF2,
	 0xE0, 0xCF, 0xC8, 0xD5, 0x99, 0x54, 0x0A, 0xAC, 0x1C, 0x67,
	 0xDB, 0xCA, 0xAF, 0x49, 0xDB, 0x3C, 0x25, 0x15, 0xFC, 0xC6,
	 0xF0, 0x70, 0x48, 0xDC, 0x74, 0x91, 0x8D, 0x28, 0x9B, 0xE3,
	 0x91, 0xB3, 0xB0, 0xE6, 0xC0, 0x39, 0xA4, 0x03, 0xA6, 0x3D,
	 0xAB, 0xD5, 0xC8, 0xE1, 0x3B, 0x5B, 0x5D, 0xFA, 0x70, 0xBF,
	 0xF5, 0xA5, 0xA1, 0x7E, 0xD6, 0x2A, 0xD3, 0xD6, 0xFB, 0x04,
	 0xE2, 0x3C, 0xE5, 0x9E, 0x6F, 0xDA, 0x3A, 0xA4, 0xBF, 0xC1,
	 0x5D, 0x60, 0x25, 0xF1, 0x8A, 0xEF, 0x74, 0x40, 0x5C, 0x9D,
	 0xE2, 0xB1, 0x7B, 0xF6, 0x29, 0xAB, 0x87, 0xB2, 0xC0, 0xF1,
	 0x61, 0xAC, 0xCA, 0xAC, 0xC6, 0x49, 0x87, 0xEE, 0x9E, 0xDE,
	 0x1E, 0xE5, 0x91, 0x57, 0x4C, 0x74, 0x90, 0xC6, 0x5C, 0x79,
	 0x4A, 0x8B, 0x95, 0x00, 0x03, 0x9B, 0x15, 0xD8, 0x29, 0x0A,
	 0x2C, 0x85, 0x65, 0xD4, 0xF8, 0x65, 0x09, 0xAC, 0x01, 0xAD,
	 0x0F, 0xB9, 0x17, 0xFF, 0xD6, 0x2D, 0x42, 0x9F, 0x95, 0xB6,
	 0xC2, 0xDD, 0xB1, 0x1C, 0xB5, 0x95, 0x62, 0x30, 0xE8, 0xF8,
	 0x4A, 0xDD, 0x17, 0x4D, 0x1A, 0x5C, 0x39, 0x5B, 0x99, 0x2F,
	 0x47, 0x7A, 0x28, 0x92, 0xC1, 0x5A, 0x59, 0x80, 0xAF, 0x45,
	 0x36, 0xA8, 0xFE, 0x4B, 0x22, 0x5C, 0xD0, 0xF2, 0x1D, 0x1E,
	 0x41, 0xDF, 0x4C, 0xB7, 0x8A, 0xF2, 0x90, 0xF9, 0xA8, 0xE9,
	 0xFE, 0xB8, 0x6D, 0xD9, 0x39, 0x3F, 0x35, 0x22, 0xB0, 0xAD,
	 0x21, 0xCA, 0xFA, 0x4C, 0x0B, 0xE4, 0x53, 0x32, 0x89, 0x55,
	 0x61, 0x1C, 0xB0, 0x58, 0x59, 0x99, 0x88, 0xDD, 0xD0, 0x8E,
	 0x75, 0x2D, 0x5F, 0xA2, 0x28, 0x25, 0xB1, 0x83, 0x04, 0x26,
	 0xBE, 0x58, 0xF9, 0x4D, 0x28, 0x0B, 0x22, 0x14, 0x21, 0xA0,
	 0xFF, 0x56, 0xD1, 0x7D, 0x14, 0x61, 0xF9, 0x89, 0xB5, 0xC8,
	 0xEC, 0xF4, 0xF2, 0xE7, 0x96, 0x89, 0x03, 0xE4, 0x52, 0x65,
	 0x90, 0x76, 0x1A, 0xEB, 0xC3, 0x9A, 0xE9, 0xED, 0x5E, 0x21,
	 0x63, 0x32, 0x76, 0xDB, 0x97, 0x96, 0x1E, 0x6D, 0xB0, 0x01,
	 0xC4, 0xFD, 0xCB, 0xE5, 0x4D, 0x32, 0x0C, 0x3A, 0xE0, 0x6C,
	 0x76, 0x26, 0x2A, 0x37, 0x87, 0x90, 0xE3, 0x17, 0x9E, 0xE0,
	 0xC1, 0x46, 0x2E, 0x46, 0x0D, 0xC9, 0x75, 0x61, 0x73, 0x93,
	 0xBB, 0x8C, 0xFA, 0x6F, 0xD4, 0xBA, 0x6A, 0xB3, 0x5A, 0x45,
	 0x51, 0xBB, 0x4E, 0x5F, 0x4A, 0x69, 0xE5, 0x56, 0xEB, 0x93,
	 0xA6, 0x90, 0x06, 0x0A, 0x9C, 0x74, 0x72, 0x87, 0x40, 0xB9,
	 0xE7, 0x56, 0x17, 0x7E, 0xAE, 0xC1, 0x7A, 0x00, 0xBD, 0xFA,
	 0xBD, 0x59, 0x01, 0xA5, 0x65, 0xB2, 0x79, 0xF8, 0x33, 0x82,
	 0xDA, 0x0F, 0x49, 0x05, 0xD1, 0x5C, 0xD4, 0xC0, 0xF4, 0x7E,
	 0x6B, 0x19, 0x54, 0x39, 0x16, 0x3E, 0xC0, 0x78, 0xB2, 0xE3,
	 0xB0, 0xB9, 0xCF, 0x94, 0x4B, 0xAB, 0x11, 0xDB, 0xCF, 0x73,
	 0x03, 0xCB, 0x24, 0x3E, 0xD8, 0x1D, 0x3C, 0xBF, 0xAE, 0x3C,
	 0xA8, 0x06, 0xD7, 0x2A, 0x11, 0xB4, 0x45, 0xD7, 0xC2, 0x54,
	 0x6B, 0x99, 0x3D, 0xEC, 0x97, 0x32, 0xAD, 0x91, 0x63, 0x0C,
	 0x47, 0x12, 0x88, 0x6A, 0xCD, 0xBD, 0xD1, 0x7B, 0x6C, 0x9B,
	 0xC8, 0xFC, 0x34, 0x6B, 0xF3, 0x15
};

#else

const static uint8_t kEncrEncryptLut[896] =
{
	 0x24, 0x1E, 0x50, 0x1A, 0x44, 0x30, 0xC7, 0x59, 0xFA, 0x42,
	 0xDC, 0x8D, 0xAA, 0x3D, 0x48, 0x68, 0xE8, 0x09, 0x73, 0xA6,
	 0x00, 0x8A, 0x1A, 0x0A, 0x15, 0xA6, 0x2D, 0x31, 0x9B, 0x09,
	 0xB5, 0xD4, 0xBD, 0x1C, 0xB0, 0x3B, 0x16, 0x7E, 0xCF, 0xEB,
	 0x0B, 0x42, 0xBC, 0x43, 0x4C, 0x7F, 0x5F, 0x9E, 0x89, 0xE6,
	 0x72, 0x68, 0xDF, 0x85, 0x82, 0x09, 0x6B, 0x80, 0x8D, 0x3B,
	 0xD1, 0x36, 0xF1, 0x0D, 0xEF, 0xF0, 0x3D, 0xC1, 0x78, 0x16,
	 0x9A, 0x91, 0x76, 0x50, 0xBB, 0x2F, 0xDA, 0x67, 0xBD, 0x4C,
	 0xD5, 0x55, 0x23, 0x54, 0xC1, 0x0A, 0x6D, 0x97, 0xC2, 0x81,
	 0x63, 0xF4, 0x22, 0x53, 0x0C, 0xC6, 0xE0, 0xC6, 0x6E, 0x5C,
	 0x38, 0x13, 0x75, 0xBD, 0xB3, 0xD9, 0x37, 0xAC, 0xC0, 0x83,
	 0xED, 0x10, 0x12, 0xF2, 0x48, 0x3D, 0xCC, 0x9A, 0xCF, 0x86,
	 0x7E, 0xC0, 0x79, 0xCD, 0x48, 0xCF, 0xFE, 0xC6, 0x52, 0xC0,
	 0xC0, 0x86, 0xD9, 0xEF, 0xC7, 0x8B, 0xF6, 0x4E, 0x1F, 0x02,
	 0xFB, 0x7C, 0xAE, 0x54, 0xF4, 0x87, 0xF6, 0x2A, 0xCC, 0x53,
	 0xC5, 0xEC, 0x86, 0x01, 0x58, 0x5C, 0x14, 0x80, 0x06, 0x03,
	 0x8B, 0xCE, 0x29, 0xDE, 0x3D, 0xA6, 0x16, 0xC4, 0x7A, 0x45,
	 0x86, 0x34, 0x31, 0x27, 0xE7, 0x40, 0x32, 0x6C, 0x4B, 0x11,
	 0xCD, 0xBC, 0x60, 0xC5, 0x04, 0xFF, 0x03, 0x30, 0xBD, 0x40,
	 0x3C, 0xB7, 0x56, 0x1B, 0x46, 0x2F, 0x02, 0x36, 0x5E, 0x49,
	 0xB0, 0x44, 0xC3, 0x55, 0x34, 0xB6, 0x1E, 0x00, 0xAD, 0x32,
	 0xBF, 0xA5, 0x9C, 0xF4, 0x2F, 0xBC, 0x30, 0xA7, 0xA5, 0xCC,
	 0xFE, 0xF1, 0x4A, 0xCC, 0x4E, 0x2E, 0x40, 0xE9, 0x8E, 0x30,
	 0x00, 0xAE, 0x82, 0x34, 0xEF, 0x9A, 0xE6, 0x9E, 0xD9, 0xD7,
	 0x6A, 0xD0, 0xD5, 0xE9, 0x35, 0xBF, 0xB4, 0x99, 0x29, 0xC9,
	 0xBD, 0x49, 0x0D, 0xC4, 0x2D, 0x42, 0x3C, 0xD8, 0xE1, 0xAB,
	 0x68, 0xF2, 0x98, 0x58, 0xA6, 0x49, 0x05, 0x05, 0x1E, 0xD9,
	 0xD8, 0x20, 0x14, 0x7F, 0x5F, 0xB8, 0xFC, 0x07, 0x27, 0x67,
	 0x9B, 0x5D, 0x3E, 0xCE, 0x7D, 0x8A, 0x42, 0x61, 0x4E, 0x16,
	 0xE3, 0x97, 0x6F, 0x33, 0xA4, 0x66, 0x58, 0xB2, 0x35, 0x3B,
	 0xA1, 0x6D, 0x74, 0x29, 0x92, 0xED, 0x4F, 0x7D, 0xA3, 0x84,
	 0x2A, 0x33, 0x22, 0x92, 0x7A, 0x51, 0xD0, 0x87, 0xC5, 0xD5,
	 0x43, 0xCD, 0x44, 0x96, 0x80, 0x98, 0xAF, 0xD5, 0x5C, 0xAC,
	 0xDC, 0x9D, 0x3A, 0xDC, 0x84, 0xD6, 0xAE, 0xA4, 0x20, 0xF7,
	 0xFB, 0xF6, 0x94, 0x42, 0x29, 0x55, 0x5D, 0x1E, 0x90, 0xF4,
	 0x40, 0x26, 0xAA, 0x9E, 0x69, 0xBF, 0x17, 0xAC, 0x46, 0xAA,
	 0x5E, 0xF7, 0xA0, 0x63, 0xCA, 0x7D, 0x30, 0x45, 0x82, 0x01,
	 0xB8, 0x57, 0x17, 0xC5, 0xF1, 0x4F, 0xB8, 0xB9, 0x80, 0x50,
	 0x4F, 0x31, 0x50, 0x88, 0x50, 0xB4, 0x28, 0xF0, 0x6D, 0x42,
	 0xA1, 0x47, 0xE8, 0xD4, 0x17, 0xD4, 0xD4, 0x4E, 0xFD, 0x68,
	 0x2F, 0xDE, 0x99, 0x7D, 0x32, 0x1A, 0x17, 0x96, 0x6F, 0xAB,
	 0x59, 0xB8, 0xDD, 0x2F, 0x01, 0xFA, 0x0F, 0x26, 0x64, 0x16,
	 0xAA, 0x3A, 0xA8, 0x74, 0xA9, 0xB4, 0xF5, 0x1B, 0xA4, 0x0B,
	 0x62, 0xCF, 0xF2, 0xAF, 0xE6, 0x25, 0x4C, 0x02, 0xF0, 0x6C,
	 0x63, 0xF8, 0xF3, 0x41, 0x08, 0x04, 0xCB, 0xD1, 0x97, 0x53,
	 0x44, 0xAA, 0x72, 0x7A, 0xAD, 0xFD, 0x7A, 0x79, 0x99, 0xF6,
	 0x78, 0x12, 0x7E, 0x42, 0x67, 0x56, 0x51, 0xEF, 0x5F, 0x9C,
	 0x3E, 0x9E, 0x49, 0x2D, 0x0D, 0xAF, 0x41, 0x44, 0x3E, 0x53,
	 0x9E, 0x15, 0xEC, 0xD7, 0x48, 0xBA, 0xB9, 0x38, 0xAA, 0x5E,
	 0x3E, 0xC1, 0x1C, 0x41, 0xB9, 0x6C, 0xFA, 0x65, 0x7A, 0x29,
	 0x1F, 0x7C, 0x14, 0x18, 0x14, 0xAF, 0xA4, 0xC3, 0xE8, 0x40,
	 0x2A, 0x27, 0x81, 0x5F, 0x94, 0x73, 0x28, 0x87, 0xE5, 0x9F,
	 0x8D, 0xD3, 0x5B, 0xDF, 0x0C, 0x46, 0x70, 0x13, 0x46, 0xE2,
	 0x59, 0x9D, 0x98, 0x1C, 0x2E, 0x25, 0x14, 0xE7, 0xD3, 0x17,
	 0x02, 0xA6, 0x64, 0x94, 0x60, 0x1C, 0xA8, 0xF6, 0x40, 0x77,
	 0x81, 0xF5, 0xB1, 0x27, 0xB8, 0xB6, 0xEA, 0xF8, 0x48, 0xB3,
	 0x64, 0x30, 0x81, 0x3C, 0xCE, 0x13, 0x7E, 0x84, 0x67, 0x38,
	 0x5F, 0xB3, 0x3A, 0x0A, 0x30, 0xC7, 0xC9, 0x7A, 0x7A, 0x48,
	 0xD2, 0xA9, 0x8E, 0xDB, 0x59, 0x23, 0x0B, 0xAE, 0x11, 0xCB,
	 0xDA, 0xD3, 0x88, 0x10, 0xE2, 0xC0, 0x78, 0xBC, 0xC2, 0x0B,
	 0x21, 0x1E, 0x5E, 0x79, 0x53, 0x65, 0x84, 0x4D, 0x3C, 0xD8,
	 0xD2, 0xCC, 0x34, 0x7A, 0xA0, 0x25, 0x7C, 0x11, 0xB2, 0xBF,
	 0xD9, 0xCF, 0x00, 0x79, 0x18, 0x36, 0x0E, 0x59, 0xA4, 0x65,
	 0x24, 0xBE, 0x7D, 0x90, 0xA4, 0x97, 0x5C, 0x81, 0x9C, 0x10,
	 0x5E, 0xB5, 0xED, 0xC8, 0xD3, 0x21, 0x4B, 0xC2, 0x0F, 0x45,
	 0x8D, 0x54, 0xF9, 0x16, 0xD7, 0xA7, 0x7E, 0x16, 0xD9, 0xD8,
	 0xE2, 0x39, 0xC2, 0x86, 0xAF, 0x4D, 0xA2, 0x6C, 0xF0, 0xE1,
	 0xEE, 0x0C, 0x03, 0x84, 0x52, 0x16, 0x8C, 0xB8, 0x29, 0x06,
	 0x58, 0xF1, 0x5D, 0x47, 0x63, 0x04, 0x3C, 0xB8, 0x38, 0x4A,
	 0xBA, 0x0E, 0xDE, 0xF0, 0x79, 0x93, 0x97, 0x32, 0x25, 0x02,
	 0x4E, 0xB9, 0xF1, 0x48, 0x74, 0x27, 0xFA, 0x1D, 0x68, 0xEC,
	 0x6B, 0xF7, 0x40, 0xFC, 0xD8, 0x3F, 0x95, 0x73, 0xA1, 0x9A,
	 0x3F, 0x95, 0x7B, 0xC8, 0x17, 0x77, 0x9F, 0x6F, 0xA1, 0x0D,
	 0x2D, 0x3B, 0x37, 0xDC, 0xEB, 0xCF, 0x59, 0xD7, 0xDC, 0xEE,
	 0x58, 0x5D, 0x98, 0x68, 0x73, 0x3E, 0x98, 0xFD, 0x60, 0xD5,
	 0x4E, 0xA3, 0xD2, 0xC7, 0xF6, 0xD8, 0xD1, 0x30, 0x59, 0xCB,
	 0x33, 0xE4, 0x18, 0x46, 0x91, 0xB3, 0xE4, 0xAD, 0x3B, 0xFE,
	 0xCA, 0xE7, 0x47, 0x66, 0x76, 0xC7, 0x38, 0xBD, 0x1C, 0x48,
	 0x1E, 0xAB, 0x2E, 0x68, 0x21, 0x94, 0xC6, 0xFF, 0x23, 0x51,
	 0xEA, 0xC8, 0x4C, 0x90, 0x1A, 0x41, 0xE9, 0x78, 0x04, 0x63,
	 0x62, 0x91, 0x51, 0x29, 0x83, 0xDB, 0xAE, 0xAE, 0x3D, 0x9E,
	 0xCD, 0x40, 0x2F, 0x1E, 0x3F, 0x70, 0xB2, 0xD9, 0x6E, 0xE3,
	 0x5E, 0xE3, 0x0D, 0x7B, 0xB2, 0xB1, 0xA6, 0x67, 0xB4, 0xE4,
	 0x5D, 0x4E, 0xC4, 0x84, 0x19, 0xE1, 0x41, 0x92, 0xD1, 0x13,
	 0x53, 0x15, 0xEC, 0xC7, 0x6A, 0xC3, 0xCB, 0x04, 0xE7, 0xBE,
	 0x70, 0x54, 0x54, 0x66, 0xA4, 0xFD, 0xF9, 0x27, 0x42, 0x5F,
	 0xC8, 0x06, 0x44, 0xB6, 0xD6, 0x2D, 0xE9, 0x06, 0xA7, 0x32,
	 0x32, 0xF8, 0x73, 0x63, 0x37, 0x36, 0x8D, 0x40, 0xC8, 0x78,
	 0xCA, 0x1F, 0x06, 0xC7, 0x65, 0x2A, 0x61, 0xF9, 0x16, 0x92,
	 0xDD, 0x04, 0xF7, 0xAE, 0x4C, 0xF1
};

const static uint8_t kEncrDecryptLut[896] =
{
	 0x38, 0xC7, 0xC6, 0xAB, 0x6C, 0x47, 0x61, 0x77, 0xD2, 0xA7,
	 0x96, 0x28, 0xC3, 0xDA, 0xA7, 0xBB, 0x2D, 0x0D, 0xD5, 0xE7,
	 0xC8, 0x31, 0x40, 0xCA, 0x76, 0x93, 0xEF, 0x14, 0x0D, 0x13,
	 0xB6, 0xBC, 0x0D, 0x7F, 0x3B, 0xF9, 0xDA, 0xB0, 0x4B, 0x26,
	 0x3D, 0x8F, 0xD3, 0xC2, 0x38, 0xD5, 0x12, 0x7F, 0x31, 0xF2,
	 0x9A, 0xD8, 0xB2, 0x2A, 0x05, 0xBE, 0x60, 0x7E, 0xF6, 0xC0,
	 0xBD, 0x8D, 0x71, 0x89, 0x55, 0x8A, 0x6D, 0x28, 0xBB, 0xB2,
	 0x48, 0x15, 0x54, 0xC0, 0x2F, 0x6A, 0x72, 0x64, 0x4C, 0x86,
	 0xB6, 0xFD, 0x9A, 0xB5, 0x5E, 0x38, 0xD0, 0xF8, 0x63, 0x89,
	 0x3D, 0x09, 0x99, 0x58, 0x98, 0x11, 0xD3, 0x78, 0xD2, 0x88,
	 0x0D, 0x2C, 0x4F, 0x06, 0x74, 0x42, 0x6A, 0x20, 0x58, 0x93,
	 0xC3, 0xDA, 0xB3, 0x1E, 0x56, 0xEC, 0x9F, 0x25, 0x68, 0xF4,
	 0xA8, 0xAA, 0xED, 0x0A, 0xA3, 0x20, 0xED, 0x8F, 0xA7, 0x42,
	 0xFF, 0x11, 0xD3, 0xFE, 0x7A, 0xC8, 0x55, 0xE2, 0x2C, 0xB3,
	 0x8D, 0x29, 0x08, 0x97, 0x6A, 0x38, 0x47, 0x4F, 0x2B, 0xA6,
	 0x90, 0xBF, 0x6F, 0x12, 0xD1, 0x5B, 0x2B, 0x67, 0x58, 0xBB,
	 0x4A, 0xF2, 0x2F, 0x7C, 0x2C, 0x55, 0x21, 0x41, 0x16, 0x56,
	 0x4A, 0xEC, 0x20, 0xC0, 0x59, 0x6F, 0x9D, 0xDD, 0x84, 0x5F,
	 0x9D, 0x74, 0xB1, 0x91, 0x37, 0x3E, 0x3E, 0x6A, 0x9E, 0xEA,
	 0x0B, 0xEC, 0x1A, 0x22, 0xA8, 0xC0, 0x07, 0x91, 0xF3, 0xAF,
	 0xC6, 0x66, 0x12, 0x9A, 0x80, 0x33, 0xC1, 0xFA, 0xE5, 0x25,
	 0x83, 0x59, 0x6A, 0x92, 0x06, 0x13, 0xA4, 0xF8, 0xF8, 0x9D,
	 0x0F, 0x81, 0x1D, 0x66, 0x3C, 0xE1, 0xB6, 0xC3, 0xCE, 0x34,
	 0x39, 0x85, 0x61, 0xC6, 0x9F, 0x01, 0x4C, 0xB1, 0xAA, 0xA4,
	 0x24, 0x17, 0x74, 0xEA, 0x72, 0xE4, 0x1C, 0x3F, 0x52, 0x2E,
	 0x83, 0xB6, 0x4D, 0x82, 0xCD, 0x8B, 0xB0, 0x6D, 0x50, 0x96,
	 0x81, 0xBB, 0xC9, 0x00, 0xD4, 0xA8, 0x7A, 0x93, 0xB0, 0x92,
	 0x32, 0x95, 0xC2, 0x10, 0x9D, 0x3C, 0xC5, 0x5D, 0xE3, 0xCB,
	 0xC0, 0xD3, 0x10, 0x80, 0xA8, 0xD2, 0xD0, 0xB5, 0x6B, 0x9B,
	 0x28, 0xBE, 0xE1, 0x28, 0x27, 0x00, 0x09, 0xA3, 0xA5, 0x88,
	 0x78, 0x81, 0xCA, 0xFC, 0xA4, 0xBF, 0xAE, 0x36, 0xA4, 0xBD,
	 0xDF, 0x6F, 0x71, 0x2D, 0x5A, 0x0B, 0x57, 0xC1, 0xC3, 0x9D,
	 0x37, 0x39, 0xCA, 0xC0, 0x4A, 0x78, 0xCB, 0xAC, 0xD4, 0xF4,
	 0x86, 0xF4, 0x1F, 0xAC, 0xE3, 0xC1, 0x8E, 0x0A, 0x15, 0x40,
	 0xF8, 0x5D, 0x74, 0xB3, 0x4A, 0x8C, 0xE6, 0x77, 0xA2, 0xDD,
	 0x7C, 0x79, 0xE9, 0xA0, 0x2B, 0x13, 0xE4, 0x84, 0x4F, 0x1E,
	 0x08, 0xAC, 0x8C, 0x21, 0x02, 0xA8, 0x3D, 0x58, 0xA1, 0x0D,
	 0x5A, 0xE2, 0x55, 0xDA, 0x7F, 0xDB, 0x5B, 0xE9, 0xC6, 0x91,
	 0x9C, 0x3F, 0x4D, 0xAE, 0x52, 0x17, 0x94, 0xCD, 0xBA, 0x47,
	 0xBF, 0x70, 0x80, 0xF5, 0x8B, 0xAC, 0x7D, 0xAD, 0x8F, 0x21,
	 0x2D, 0xDF, 0x5B, 0x69, 0x03, 0x9A, 0xCC, 0x67, 0x53, 0xEF,
	 0xFD, 0xCE, 0x04, 0x61, 0x83, 0x93, 0xCB, 0x22, 0x79, 0x3B,
	 0x54, 0x2E, 0x09, 0x91, 0x63, 0x40, 0xD3, 0xB1, 0x3F, 0x7F,
	 0xB0, 0x00, 0x5A, 0xEA, 0x65, 0x61, 0x25, 0x4C, 0xE3, 0x39,
	 0xFF, 0x9C, 0x13, 0x37, 0xD5, 0x1F, 0x95, 0xD8, 0x2E, 0x07,
	 0xC2, 0x84, 0x18, 0x86, 0xD7, 0x53, 0xFC, 0x78, 0xC6, 0x29,
	 0x2A, 0x37, 0x54, 0xB3, 0xD7, 0x1A, 0x80, 0x8E, 0xC8, 0xFE,
	 0xEF, 0xFD, 0xDB, 0x36, 0x13, 0x99, 0x9B, 0x15, 0x34, 0x50,
	 0xB0, 0x75, 0xCF, 0xA9, 0xDD, 0xDD, 0xB6, 0xC5, 0x54, 0x8D,
	 0xD3, 0xFC, 0x84, 0x16, 0x37, 0xAF, 0x49, 0xBD, 0x9A, 0x79,
	 0x2E, 0x6C, 0x23, 0x37, 0xB4, 0xE2, 0x61, 0xD9, 0x75, 0x2E,
	 0x09, 0x6F, 0x0A, 0x34, 0x00, 0xAC, 0x01, 0xCE, 0x49, 0xDC,
	 0x77, 0xFE, 0x66, 0x5E, 0x7A, 0xEE, 0xF8, 0x7D, 0x0B, 0x05,
	 0xD7, 0x99, 0xC2, 0xBE, 0x24, 0xAA, 0x81, 0x7D, 0x1E, 0x00,
	 0x35, 0x9E, 0xE5, 0x40, 0x87, 0x7C, 0x43, 0xEE, 0xE4, 0x85,
	 0x6A, 0xAE, 0xC9, 0x9F, 0x9C, 0x8C, 0x49, 0x87, 0xAD, 0x48,
	 0x55, 0x35, 0xA0, 0x70, 0xE0, 0xA3, 0x44, 0xB0, 0xD0, 0x67,
	 0xE8, 0x8D, 0xDB, 0x50, 0x58, 0xA4, 0xA3, 0xFF, 0x8B, 0x0B,
	 0x95, 0x84, 0x1B, 0xA9, 0x9F, 0xD4, 0x9F, 0xC7, 0x61, 0xCF,
	 0x2B, 0x04, 0x10, 0x15, 0x23, 0x66, 0xEE, 0x73, 0x0A, 0x7E,
	 0x28, 0x32, 0x44, 0x7C, 0xD6, 0x23, 0xBF, 0xDB, 0x17, 0x1B,
	 0x97, 0x51, 0x26, 0xD2, 0xD5, 0x60, 0x2D, 0xC0, 0x64, 0x79,
	 0x5B, 0xD7, 0x70, 0x4B, 0xB6, 0x19, 0x35, 0xF8, 0x67, 0x12,
	 0xB2, 0xD2, 0x28, 0x0B, 0x4C, 0x18, 0xDB, 0x3B, 0x53, 0x88,
	 0x8B, 0x47, 0x4D, 0xD3, 0xAC, 0x84, 0xD7, 0x5E, 0x9C, 0x2A,
	 0xBB, 0x91, 0xDB, 0xE7, 0xFC, 0x1A, 0x9A, 0x00, 0x07, 0x0D,
	 0x66, 0xE9, 0x18, 0xEE, 0xDF, 0x3B, 0x50, 0x32, 0x8A, 0x40,
	 0x13, 0xB2, 0xF2, 0x50, 0x93, 0x1D, 0x87, 0x14, 0x48, 0xD7,
	 0x04, 0x8F, 0x0A, 0xCB, 0x41, 0x1C, 0x52, 0xA6, 0xF2, 0xBD,
	 0x34, 0xFF, 0x1C, 0x62, 0x2E, 0x0D, 0x09, 0xF5, 0x55, 0xF3,
	 0x15, 0x58, 0xB3, 0x4A, 0x04, 0x63, 0x3A, 0x91, 0xBC, 0x7D,
	 0x94, 0x51, 0x66, 0xBA, 0x67, 0x27, 0xD7, 0x71, 0x92, 0x05,
	 0xB6, 0x6C, 0xF6, 0xC4, 0xA5, 0xA9, 0x50, 0xCF, 0x12, 0x45,
	 0xA5, 0xA3, 0xF9, 0x55, 0x0D, 0x20, 0xA8, 0xB8, 0xD8, 0x62,
	 0x12, 0x07, 0xAE, 0xA5, 0x31, 0x49, 0xA4, 0x2F, 0xE1, 0x10,
	 0x1B, 0x10, 0x91, 0x71, 0x79, 0x3C, 0x89, 0xBF, 0x82, 0x76,
	 0x1B, 0xC5, 0xCD, 0xEC, 0x4F, 0x94, 0xAE, 0x1A, 0x79, 0xB5,
	 0x51, 0x5F, 0x44, 0x6D, 0x2C, 0xD0, 0x94, 0xEB, 0x4E, 0x49,
	 0xBC, 0x32, 0x80, 0x28, 0xB9, 0xFA, 0x6B, 0xA4, 0x61, 0x07,
	 0x95, 0x4B, 0x00, 0x8F, 0xAF, 0x9E, 0x44, 0xF0, 0x75, 0x29,
	 0x78, 0x71, 0x19, 0x62, 0xB0, 0x8B, 0xEE, 0x1B, 0x8C, 0xF5,
	 0xB2, 0x1C, 0x40, 0xE8, 0x7D, 0x1C, 0xC0, 0x5A, 0x8E, 0x00,
	 0x72, 0xB8, 0x29, 0x6B, 0x33, 0x5D, 0x8C, 0x36, 0x4D, 0x0E,
	 0x25, 0x72, 0x34, 0x7E, 0x98, 0xFE, 0xC0, 0x5F, 0x35, 0x6D,
	 0xD9, 0xFA, 0x1F, 0x60, 0x87, 0xC8, 0xF1, 0x5C, 0xEF, 0xF7,
	 0x0D, 0x5B, 0x40, 0xEE, 0xAF, 0x49, 0x7F, 0x45, 0xF7, 0xFC,
	 0x9B, 0x55, 0x76, 0x92, 0xE3, 0x84, 0x0D, 0x23, 0x72, 0x1C,
	 0x4E, 0x6F, 0xEA, 0x40, 0x73, 0x1B, 0x3B, 0x86, 0x66, 0xA9,
	 0x6F, 0x22, 0xBC, 0x8E, 0xD6, 0x4C, 0xFC, 0x03, 0x1D, 0x09,
	 0x07, 0x74, 0x06, 0x3F, 0x3C, 0xAB
};

#endif

static uint8_t kEncryptLut5[3][256];
static uint8_t kDecryptLut5[3][256];

void
Application::decryptLuts()
{
	Context::bytes_t decrypted;
	if ( !this->decrypt(kEncrEncryptLut, sizeof(kEncrEncryptLut), decrypted) )
		memcpy(kEncryptLut5, kEncrEncryptLut, sizeof(kEncryptLut5));
	else
		memcpy(kEncryptLut5, &decrypted[0], (std::min)(sizeof(kEncryptLut5), decrypted.size()));
		
	
	decrypted.clear();
	if ( !this->decrypt(kEncrDecryptLut, sizeof(kEncrDecryptLut), decrypted) )
		memcpy(kDecryptLut5, kEncrDecryptLut, sizeof(kDecryptLut5));
	else
		memcpy(kDecryptLut5, &decrypted[0], (std::min)(sizeof(kDecryptLut5), decrypted.size()));
}

#else

	extern const uint8_t kEncryptLut5[3][256];
	extern const uint8_t kDecryptLut5[3][256];

#endif

static void
lutCrypt( const uint8_t      lut[3][256],
          const Block        &block )
{
	const register_t blockDiv = block.dstSize / 3;
	const uint8_t *srcData = block.srcData;
	uint8_t *dstData = block.dstData;

	for ( register_t i = 0; i < blockDiv; ++i )
	{
#if 0
		*dstData++ = lut[0][*srcData++];
		*dstData++ = lut[1][*srcData++];
		*dstData++ = lut[2][*srcData++];
#else
		if ( srcData[0] > srcData[2] )
			dstData[1] = lut[0][ srcData[1] ];
		else
			dstData[1] = lut[1][ srcData[1] ];

		dstData += 3;
		srcData += 3;
#endif
	}
}

register_t
lutEncrypt( const Block     &block )
{
	lutCrypt(kEncryptLut5, block);
	return ( 0 );
}

register_t
lutDecrypt( const Block     &block )
{
	lutCrypt(kDecryptLut5, block);
	return ( 0 );
}

register_t
splitterRGBA( const Block    &block )
{
	assert(block.dstSize < block.srcSize );

	uint8_t *srcData = const_cast<uint8_t*>(block.srcData);
	uint8_t *dstData = block.dstData;

	for ( register_t i = 0; i < block.dstSize; i += 3 )
	{
		srcData++;
		const uint8_t b = srcData[2];
		if ( srcData[0] > b )
			memset(srcData, kDecryptLut5[0][ srcData[1] ], 3);
		else
			memset(srcData, kDecryptLut5[1][ srcData[1] ], 3);
	
		memset(dstData, b, 3);

		dstData += 3;
		srcData += 3;
	}
	return ( 0 );
}

register_t
splitterBGRA( const Block    &block )
{
	assert(block.dstSize < block.srcSize );

	uint8_t *srcData = const_cast<uint8_t*>(block.srcData);
	uint8_t *dstData = block.dstData;

	for ( register_t i = 0; i < block.dstSize; i += 3 )
	{
		const uint8_t b = srcData[0];
		if ( srcData[2] > b )
			memset(srcData, kDecryptLut5[0][ srcData[1] ], 3);
		else
			memset(srcData, kDecryptLut5[1][ srcData[1] ], 3);
	
		memset(dstData, b, 3);

		dstData += 3;
		srcData += 4;
	}
	return ( 0 );
}

} /* namespace rikiGlue */
