/*
	fbxRender.pch
*/

#ifndef _fbxRender_pch__
#define _fbxRender_pch__

#if defined(__x86_64__)
	#include <CoreServices/CoreServices.h>
#elif defined(_M_X64) || defined(__amd64__)
	#include <windows.h>
	#undef max
	#undef min
	//#undef near
	//#undef far
#else
	#include <Carbon/Carbon.h>
#endif

// All this for STL...

#if defined(__cplusplus)

	#include <stdlib.h>
	#include <new>

	#ifdef BS_GPERFTOOLS
	
		extern "C"
		{
			void* tc_new(size_t);
			void* tc_newarray(size_t);
			void* tc_new_nothrow(size_t,const std::nothrow_t&);
			void* tc_newarray_nothrow(size_t,const std::nothrow_t&);

			void tc_delete(void*);
			void tc_deletearray(void*);
			void tc_delete_nothrow(void*,const std::nothrow_t&);
			void tc_deletearray_nothrow(void*,const std::nothrow_t&);
		}

		inline void*
		operator new( std::size_t    size ) throw (std::bad_alloc)
		{
			return ( tc_new(size) );
		}

		inline void*
		operator new [] ( std::size_t     size ) throw (std::bad_alloc)
		{
			return ( tc_newarray(size) );
		}

		inline void*
		operator new( std::size_t            size,
		              const std::nothrow_t   &nt )
		{
			return ( tc_new_nothrow(size, nt) );
		}

		inline void*
		operator new [] ( std::size_t            size,
		                  const std::nothrow_t   &nt )
		{
			return ( tc_newarray_nothrow(size, nt) );
		}

		inline void
		operator delete( void     *ptr ) throw()
		{
			return ( tc_delete(ptr) );
		}

		inline void
		operator delete [] ( void     *ptr ) throw()
		{
			return ( tc_deletearray(ptr) );
		}

		inline void
		operator delete( void                     *ptr,
		                 const std::nothrow_t     &nt )
		{
			return ( tc_delete_nothrow(ptr, nt) );
		}

		inline void
		operator delete [] ( void                     *ptr,
		                     const std::nothrow_t     &nt )
		{
			return ( tc_deletearray_nothrow(ptr, nt) );
		}

	#else

		inline void*
		operator new( std::size_t    size ) throw (std::bad_alloc)
		{
			return ( malloc(size) );
		}

		inline void*
		operator new [] ( std::size_t     size ) throw (std::bad_alloc)
		{
			return ( malloc(size) );
		}

		inline void*
		operator new( std::size_t            size,
		              const std::nothrow_t   &nt )
		{
			return ( malloc(size) );
		}

		inline void*
		operator new [] ( std::size_t            size,
		                  const std::nothrow_t   &nt )
		{
			return ( malloc(size) );
		}

		inline void
		operator delete( void     *ptr ) throw()
		{
			return ( free(ptr) );
		}

		inline void
		operator delete [] ( void     *ptr ) throw()
		{
			return ( free(ptr) );
		}

		inline void
		operator delete( void                     *ptr,
		                 const std::nothrow_t     &nt )
		{
			return ( free(ptr) );
		}

		inline void
		operator delete [] ( void                     *ptr,
		                     const std::nothrow_t     &nt )
		{
			return ( free(ptr) );
		}

	#endif // BS_GPERFTOOLS

#endif

#endif /* _fbxRender_pch__ */